schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type DDBatchOperation implements Operation {
  id: String!
  pooltx: PoolTx!
  delegated_deposits(skip: Int = 0, first: Int = 100, orderBy: DirectDeposit_orderBy, orderDirection: OrderDirection, where: DirectDeposit_filter): [DirectDeposit!]!
}

input DDBatchOperation_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  delegated_deposits: [String!]
  delegated_deposits_not: [String!]
  delegated_deposits_contains: [String!]
  delegated_deposits_contains_nocase: [String!]
  delegated_deposits_not_contains: [String!]
  delegated_deposits_not_contains_nocase: [String!]
  delegated_deposits_: DirectDeposit_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DDBatchOperation_filter]
  or: [DDBatchOperation_filter]
}

enum DDBatchOperation_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
  delegated_deposits
}

type DepositOperation implements Operation {
  id: String!
  pooltx: PoolTx!
  nullifier: BigInt!
  index_ref: BigInt!
  token_amount: BigInt!
  fee: BigInt!
}

input DepositOperation_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  nullifier: BigInt
  nullifier_not: BigInt
  nullifier_gt: BigInt
  nullifier_lt: BigInt
  nullifier_gte: BigInt
  nullifier_lte: BigInt
  nullifier_in: [BigInt!]
  nullifier_not_in: [BigInt!]
  index_ref: BigInt
  index_ref_not: BigInt
  index_ref_gt: BigInt
  index_ref_lt: BigInt
  index_ref_gte: BigInt
  index_ref_lte: BigInt
  index_ref_in: [BigInt!]
  index_ref_not_in: [BigInt!]
  token_amount: BigInt
  token_amount_not: BigInt
  token_amount_gt: BigInt
  token_amount_lt: BigInt
  token_amount_gte: BigInt
  token_amount_lte: BigInt
  token_amount_in: [BigInt!]
  token_amount_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DepositOperation_filter]
  or: [DepositOperation_filter]
}

enum DepositOperation_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
  nullifier
  index_ref
  token_amount
  fee
}

type DirectDeposit {
  id: String!
  index: BigInt!
  pending: Boolean!
  completed: Boolean!
  refunded: Boolean!
  sender: Bytes!
  fallbackUser: Bytes!
  zkAddress_diversifier: Bytes!
  zkAddress_pk: Bytes!
  deposit: BigInt!
  fee: BigInt!
  bnInit: BigInt!
  tsInit: BigInt!
  txInit: Bytes!
  payment: Payment
  bnClosed: BigInt
  tsClosed: BigInt
  txClosed: Bytes
}

input DirectDeposit_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  pending: Boolean
  pending_not: Boolean
  pending_in: [Boolean!]
  pending_not_in: [Boolean!]
  completed: Boolean
  completed_not: Boolean
  completed_in: [Boolean!]
  completed_not_in: [Boolean!]
  refunded: Boolean
  refunded_not: Boolean
  refunded_in: [Boolean!]
  refunded_not_in: [Boolean!]
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  fallbackUser: Bytes
  fallbackUser_not: Bytes
  fallbackUser_gt: Bytes
  fallbackUser_lt: Bytes
  fallbackUser_gte: Bytes
  fallbackUser_lte: Bytes
  fallbackUser_in: [Bytes!]
  fallbackUser_not_in: [Bytes!]
  fallbackUser_contains: Bytes
  fallbackUser_not_contains: Bytes
  zkAddress_diversifier: Bytes
  zkAddress_diversifier_not: Bytes
  zkAddress_diversifier_gt: Bytes
  zkAddress_diversifier_lt: Bytes
  zkAddress_diversifier_gte: Bytes
  zkAddress_diversifier_lte: Bytes
  zkAddress_diversifier_in: [Bytes!]
  zkAddress_diversifier_not_in: [Bytes!]
  zkAddress_diversifier_contains: Bytes
  zkAddress_diversifier_not_contains: Bytes
  zkAddress_pk: Bytes
  zkAddress_pk_not: Bytes
  zkAddress_pk_gt: Bytes
  zkAddress_pk_lt: Bytes
  zkAddress_pk_gte: Bytes
  zkAddress_pk_lte: Bytes
  zkAddress_pk_in: [Bytes!]
  zkAddress_pk_not_in: [Bytes!]
  zkAddress_pk_contains: Bytes
  zkAddress_pk_not_contains: Bytes
  deposit: BigInt
  deposit_not: BigInt
  deposit_gt: BigInt
  deposit_lt: BigInt
  deposit_gte: BigInt
  deposit_lte: BigInt
  deposit_in: [BigInt!]
  deposit_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  bnInit: BigInt
  bnInit_not: BigInt
  bnInit_gt: BigInt
  bnInit_lt: BigInt
  bnInit_gte: BigInt
  bnInit_lte: BigInt
  bnInit_in: [BigInt!]
  bnInit_not_in: [BigInt!]
  tsInit: BigInt
  tsInit_not: BigInt
  tsInit_gt: BigInt
  tsInit_lt: BigInt
  tsInit_gte: BigInt
  tsInit_lte: BigInt
  tsInit_in: [BigInt!]
  tsInit_not_in: [BigInt!]
  txInit: Bytes
  txInit_not: Bytes
  txInit_gt: Bytes
  txInit_lt: Bytes
  txInit_gte: Bytes
  txInit_lte: Bytes
  txInit_in: [Bytes!]
  txInit_not_in: [Bytes!]
  txInit_contains: Bytes
  txInit_not_contains: Bytes
  payment: String
  payment_not: String
  payment_gt: String
  payment_lt: String
  payment_gte: String
  payment_lte: String
  payment_in: [String!]
  payment_not_in: [String!]
  payment_contains: String
  payment_contains_nocase: String
  payment_not_contains: String
  payment_not_contains_nocase: String
  payment_starts_with: String
  payment_starts_with_nocase: String
  payment_not_starts_with: String
  payment_not_starts_with_nocase: String
  payment_ends_with: String
  payment_ends_with_nocase: String
  payment_not_ends_with: String
  payment_not_ends_with_nocase: String
  payment_: Payment_filter
  bnClosed: BigInt
  bnClosed_not: BigInt
  bnClosed_gt: BigInt
  bnClosed_lt: BigInt
  bnClosed_gte: BigInt
  bnClosed_lte: BigInt
  bnClosed_in: [BigInt!]
  bnClosed_not_in: [BigInt!]
  tsClosed: BigInt
  tsClosed_not: BigInt
  tsClosed_gt: BigInt
  tsClosed_lt: BigInt
  tsClosed_gte: BigInt
  tsClosed_lte: BigInt
  tsClosed_in: [BigInt!]
  tsClosed_not_in: [BigInt!]
  txClosed: Bytes
  txClosed_not: Bytes
  txClosed_gt: Bytes
  txClosed_lt: Bytes
  txClosed_gte: Bytes
  txClosed_lte: Bytes
  txClosed_in: [Bytes!]
  txClosed_not_in: [Bytes!]
  txClosed_contains: Bytes
  txClosed_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DirectDeposit_filter]
  or: [DirectDeposit_filter]
}

enum DirectDeposit_orderBy {
  id
  index
  pending
  completed
  refunded
  sender
  fallbackUser
  zkAddress_diversifier
  zkAddress_pk
  deposit
  fee
  bnInit
  tsInit
  txInit
  payment
  payment__id
  payment__sender
  payment__token
  payment__note
  bnClosed
  tsClosed
  txClosed
}

"""
8 bytes signed integer

"""
scalar Int8

type LastSyncBlock {
  id: Bytes!
  block: BigInt
}

input LastSyncBlock_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  block: BigInt
  block_not: BigInt
  block_gt: BigInt
  block_lt: BigInt
  block_gte: BigInt
  block_lte: BigInt
  block_in: [BigInt!]
  block_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LastSyncBlock_filter]
  or: [LastSyncBlock_filter]
}

enum LastSyncBlock_orderBy {
  id
  block
}

interface Operation {
  id: String!
  pooltx: PoolTx!
}

input Operation_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Operation_filter]
  or: [Operation_filter]
}

enum Operation_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Payment {
  id: String!
  sender: Bytes
  delegated_deposit: DirectDeposit!
  token: Bytes!
  note: Bytes
}

input Payment_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  sender: Bytes
  sender_not: Bytes
  sender_gt: Bytes
  sender_lt: Bytes
  sender_gte: Bytes
  sender_lte: Bytes
  sender_in: [Bytes!]
  sender_not_in: [Bytes!]
  sender_contains: Bytes
  sender_not_contains: Bytes
  delegated_deposit: String
  delegated_deposit_not: String
  delegated_deposit_gt: String
  delegated_deposit_lt: String
  delegated_deposit_gte: String
  delegated_deposit_lte: String
  delegated_deposit_in: [String!]
  delegated_deposit_not_in: [String!]
  delegated_deposit_contains: String
  delegated_deposit_contains_nocase: String
  delegated_deposit_not_contains: String
  delegated_deposit_not_contains_nocase: String
  delegated_deposit_starts_with: String
  delegated_deposit_starts_with_nocase: String
  delegated_deposit_not_starts_with: String
  delegated_deposit_not_starts_with_nocase: String
  delegated_deposit_ends_with: String
  delegated_deposit_ends_with_nocase: String
  delegated_deposit_not_ends_with: String
  delegated_deposit_not_ends_with_nocase: String
  delegated_deposit_: DirectDeposit_filter
  token: Bytes
  token_not: Bytes
  token_gt: Bytes
  token_lt: Bytes
  token_gte: Bytes
  token_lte: Bytes
  token_in: [Bytes!]
  token_not_in: [Bytes!]
  token_contains: Bytes
  token_not_contains: Bytes
  note: Bytes
  note_not: Bytes
  note_gt: Bytes
  note_lt: Bytes
  note_gte: Bytes
  note_lte: Bytes
  note_in: [Bytes!]
  note_not_in: [Bytes!]
  note_contains: Bytes
  note_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Payment_filter]
  or: [Payment_filter]
}

enum Payment_orderBy {
  id
  sender
  delegated_deposit
  delegated_deposit__id
  delegated_deposit__index
  delegated_deposit__pending
  delegated_deposit__completed
  delegated_deposit__refunded
  delegated_deposit__sender
  delegated_deposit__fallbackUser
  delegated_deposit__zkAddress_diversifier
  delegated_deposit__zkAddress_pk
  delegated_deposit__deposit
  delegated_deposit__fee
  delegated_deposit__bnInit
  delegated_deposit__tsInit
  delegated_deposit__txInit
  delegated_deposit__bnClosed
  delegated_deposit__tsClosed
  delegated_deposit__txClosed
  token
  note
}

type PermittableDepositOperation implements Operation {
  id: String!
  pooltx: PoolTx!
  nullifier: BigInt!
  index_ref: BigInt!
  token_amount: BigInt!
  fee: BigInt!
  permit_deadline: BigInt!
  permit_holder: Bytes!
  sig: Bytes!
}

input PermittableDepositOperation_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  nullifier: BigInt
  nullifier_not: BigInt
  nullifier_gt: BigInt
  nullifier_lt: BigInt
  nullifier_gte: BigInt
  nullifier_lte: BigInt
  nullifier_in: [BigInt!]
  nullifier_not_in: [BigInt!]
  index_ref: BigInt
  index_ref_not: BigInt
  index_ref_gt: BigInt
  index_ref_lt: BigInt
  index_ref_gte: BigInt
  index_ref_lte: BigInt
  index_ref_in: [BigInt!]
  index_ref_not_in: [BigInt!]
  token_amount: BigInt
  token_amount_not: BigInt
  token_amount_gt: BigInt
  token_amount_lt: BigInt
  token_amount_gte: BigInt
  token_amount_lte: BigInt
  token_amount_in: [BigInt!]
  token_amount_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  permit_deadline: BigInt
  permit_deadline_not: BigInt
  permit_deadline_gt: BigInt
  permit_deadline_lt: BigInt
  permit_deadline_gte: BigInt
  permit_deadline_lte: BigInt
  permit_deadline_in: [BigInt!]
  permit_deadline_not_in: [BigInt!]
  permit_holder: Bytes
  permit_holder_not: Bytes
  permit_holder_gt: Bytes
  permit_holder_lt: Bytes
  permit_holder_gte: Bytes
  permit_holder_lte: Bytes
  permit_holder_in: [Bytes!]
  permit_holder_not_in: [Bytes!]
  permit_holder_contains: Bytes
  permit_holder_not_contains: Bytes
  sig: Bytes
  sig_not: Bytes
  sig_gt: Bytes
  sig_lt: Bytes
  sig_gte: Bytes
  sig_lte: Bytes
  sig_in: [Bytes!]
  sig_not_in: [Bytes!]
  sig_contains: Bytes
  sig_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PermittableDepositOperation_filter]
  or: [PermittableDepositOperation_filter]
}

enum PermittableDepositOperation_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
  nullifier
  index_ref
  token_amount
  fee
  permit_deadline
  permit_holder
  sig
}

type PoolTx {
  id: String!
  index: BigInt!
  tx: Bytes!
  ts: BigInt!
  all_messages_hash: Bytes!
  type: Int!
  message: Bytes!
  gas_used: Int!
  zk: ZkCommon!
  operation: Operation!
  calldata: Bytes!
}

input PoolTx_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  index: BigInt
  index_not: BigInt
  index_gt: BigInt
  index_lt: BigInt
  index_gte: BigInt
  index_lte: BigInt
  index_in: [BigInt!]
  index_not_in: [BigInt!]
  tx: Bytes
  tx_not: Bytes
  tx_gt: Bytes
  tx_lt: Bytes
  tx_gte: Bytes
  tx_lte: Bytes
  tx_in: [Bytes!]
  tx_not_in: [Bytes!]
  tx_contains: Bytes
  tx_not_contains: Bytes
  ts: BigInt
  ts_not: BigInt
  ts_gt: BigInt
  ts_lt: BigInt
  ts_gte: BigInt
  ts_lte: BigInt
  ts_in: [BigInt!]
  ts_not_in: [BigInt!]
  all_messages_hash: Bytes
  all_messages_hash_not: Bytes
  all_messages_hash_gt: Bytes
  all_messages_hash_lt: Bytes
  all_messages_hash_gte: Bytes
  all_messages_hash_lte: Bytes
  all_messages_hash_in: [Bytes!]
  all_messages_hash_not_in: [Bytes!]
  all_messages_hash_contains: Bytes
  all_messages_hash_not_contains: Bytes
  type: Int
  type_not: Int
  type_gt: Int
  type_lt: Int
  type_gte: Int
  type_lte: Int
  type_in: [Int!]
  type_not_in: [Int!]
  message: Bytes
  message_not: Bytes
  message_gt: Bytes
  message_lt: Bytes
  message_gte: Bytes
  message_lte: Bytes
  message_in: [Bytes!]
  message_not_in: [Bytes!]
  message_contains: Bytes
  message_not_contains: Bytes
  gas_used: Int
  gas_used_not: Int
  gas_used_gt: Int
  gas_used_lt: Int
  gas_used_gte: Int
  gas_used_lte: Int
  gas_used_in: [Int!]
  gas_used_not_in: [Int!]
  zk: String
  zk_not: String
  zk_gt: String
  zk_lt: String
  zk_gte: String
  zk_lte: String
  zk_in: [String!]
  zk_not_in: [String!]
  zk_contains: String
  zk_contains_nocase: String
  zk_not_contains: String
  zk_not_contains_nocase: String
  zk_starts_with: String
  zk_starts_with_nocase: String
  zk_not_starts_with: String
  zk_not_starts_with_nocase: String
  zk_ends_with: String
  zk_ends_with_nocase: String
  zk_not_ends_with: String
  zk_not_ends_with_nocase: String
  zk_: ZkCommon_filter
  operation: String
  operation_not: String
  operation_gt: String
  operation_lt: String
  operation_gte: String
  operation_lte: String
  operation_in: [String!]
  operation_not_in: [String!]
  operation_contains: String
  operation_contains_nocase: String
  operation_not_contains: String
  operation_not_contains_nocase: String
  operation_starts_with: String
  operation_starts_with_nocase: String
  operation_not_starts_with: String
  operation_not_starts_with_nocase: String
  operation_ends_with: String
  operation_ends_with_nocase: String
  operation_not_ends_with: String
  operation_not_ends_with_nocase: String
  operation_: Operation_filter
  calldata: Bytes
  calldata_not: Bytes
  calldata_gt: Bytes
  calldata_lt: Bytes
  calldata_gte: Bytes
  calldata_lte: Bytes
  calldata_in: [Bytes!]
  calldata_not_in: [Bytes!]
  calldata_contains: Bytes
  calldata_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolTx_filter]
  or: [PoolTx_filter]
}

enum PoolTx_orderBy {
  id
  index
  tx
  ts
  all_messages_hash
  type
  message
  gas_used
  zk
  zk__id
  zk__out_commit
  zk__tree_root_after
  operation
  operation__id
  calldata
}

type Query {
  directDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DirectDeposit
  directDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: DirectDeposit_orderBy
    orderDirection: OrderDirection
    where: DirectDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DirectDeposit!]!
  payment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payment
  payments(
    skip: Int = 0
    first: Int = 100
    orderBy: Payment_orderBy
    orderDirection: OrderDirection
    where: Payment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payment!]!
  zkCommon(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ZkCommon
  zkCommons(
    skip: Int = 0
    first: Int = 100
    orderBy: ZkCommon_orderBy
    orderDirection: OrderDirection
    where: ZkCommon_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ZkCommon!]!
  depositOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositOperation
  depositOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositOperation_orderBy
    orderDirection: OrderDirection
    where: DepositOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositOperation!]!
  transferOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferOperation
  transferOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferOperation_orderBy
    orderDirection: OrderDirection
    where: TransferOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferOperation!]!
  withdrawalOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawalOperation
  withdrawalOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawalOperation_orderBy
    orderDirection: OrderDirection
    where: WithdrawalOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawalOperation!]!
  permittableDepositOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PermittableDepositOperation
  permittableDepositOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: PermittableDepositOperation_orderBy
    orderDirection: OrderDirection
    where: PermittableDepositOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PermittableDepositOperation!]!
  ddbatchOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DDBatchOperation
  ddbatchOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: DDBatchOperation_orderBy
    orderDirection: OrderDirection
    where: DDBatchOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DDBatchOperation!]!
  poolTx(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolTx
  poolTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolTx_orderBy
    orderDirection: OrderDirection
    where: PoolTx_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolTx!]!
  lastSyncBlock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LastSyncBlock
  lastSyncBlocks(
    skip: Int = 0
    first: Int = 100
    orderBy: LastSyncBlock_orderBy
    orderDirection: OrderDirection
    where: LastSyncBlock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LastSyncBlock!]!
  operation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Operation
  operations(
    skip: Int = 0
    first: Int = 100
    orderBy: Operation_orderBy
    orderDirection: OrderDirection
    where: Operation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Operation!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  directDeposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DirectDeposit
  directDeposits(
    skip: Int = 0
    first: Int = 100
    orderBy: DirectDeposit_orderBy
    orderDirection: OrderDirection
    where: DirectDeposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DirectDeposit!]!
  payment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payment
  payments(
    skip: Int = 0
    first: Int = 100
    orderBy: Payment_orderBy
    orderDirection: OrderDirection
    where: Payment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payment!]!
  zkCommon(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ZkCommon
  zkCommons(
    skip: Int = 0
    first: Int = 100
    orderBy: ZkCommon_orderBy
    orderDirection: OrderDirection
    where: ZkCommon_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ZkCommon!]!
  depositOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DepositOperation
  depositOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: DepositOperation_orderBy
    orderDirection: OrderDirection
    where: DepositOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DepositOperation!]!
  transferOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransferOperation
  transferOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: TransferOperation_orderBy
    orderDirection: OrderDirection
    where: TransferOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransferOperation!]!
  withdrawalOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawalOperation
  withdrawalOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawalOperation_orderBy
    orderDirection: OrderDirection
    where: WithdrawalOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawalOperation!]!
  permittableDepositOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PermittableDepositOperation
  permittableDepositOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: PermittableDepositOperation_orderBy
    orderDirection: OrderDirection
    where: PermittableDepositOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PermittableDepositOperation!]!
  ddbatchOperation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DDBatchOperation
  ddbatchOperations(
    skip: Int = 0
    first: Int = 100
    orderBy: DDBatchOperation_orderBy
    orderDirection: OrderDirection
    where: DDBatchOperation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [DDBatchOperation!]!
  poolTx(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolTx
  poolTxes(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolTx_orderBy
    orderDirection: OrderDirection
    where: PoolTx_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolTx!]!
  lastSyncBlock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LastSyncBlock
  lastSyncBlocks(
    skip: Int = 0
    first: Int = 100
    orderBy: LastSyncBlock_orderBy
    orderDirection: OrderDirection
    where: LastSyncBlock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LastSyncBlock!]!
  operation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Operation
  operations(
    skip: Int = 0
    first: Int = 100
    orderBy: Operation_orderBy
    orderDirection: OrderDirection
    where: Operation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Operation!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type TransferOperation implements Operation {
  id: String!
  pooltx: PoolTx!
  nullifier: BigInt!
  index_ref: BigInt!
  fee: BigInt!
}

input TransferOperation_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  nullifier: BigInt
  nullifier_not: BigInt
  nullifier_gt: BigInt
  nullifier_lt: BigInt
  nullifier_gte: BigInt
  nullifier_lte: BigInt
  nullifier_in: [BigInt!]
  nullifier_not_in: [BigInt!]
  index_ref: BigInt
  index_ref_not: BigInt
  index_ref_gt: BigInt
  index_ref_lt: BigInt
  index_ref_gte: BigInt
  index_ref_lte: BigInt
  index_ref_in: [BigInt!]
  index_ref_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TransferOperation_filter]
  or: [TransferOperation_filter]
}

enum TransferOperation_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
  nullifier
  index_ref
  fee
}

type WithdrawalOperation implements Operation {
  id: String!
  pooltx: PoolTx!
  nullifier: BigInt!
  index_ref: BigInt!
  energy_amount: BigInt!
  token_amount: BigInt!
  fee: BigInt!
  native_amount: BigInt!
  receiver: Bytes!
}

input WithdrawalOperation_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  nullifier: BigInt
  nullifier_not: BigInt
  nullifier_gt: BigInt
  nullifier_lt: BigInt
  nullifier_gte: BigInt
  nullifier_lte: BigInt
  nullifier_in: [BigInt!]
  nullifier_not_in: [BigInt!]
  index_ref: BigInt
  index_ref_not: BigInt
  index_ref_gt: BigInt
  index_ref_lt: BigInt
  index_ref_gte: BigInt
  index_ref_lte: BigInt
  index_ref_in: [BigInt!]
  index_ref_not_in: [BigInt!]
  energy_amount: BigInt
  energy_amount_not: BigInt
  energy_amount_gt: BigInt
  energy_amount_lt: BigInt
  energy_amount_gte: BigInt
  energy_amount_lte: BigInt
  energy_amount_in: [BigInt!]
  energy_amount_not_in: [BigInt!]
  token_amount: BigInt
  token_amount_not: BigInt
  token_amount_gt: BigInt
  token_amount_lt: BigInt
  token_amount_gte: BigInt
  token_amount_lte: BigInt
  token_amount_in: [BigInt!]
  token_amount_not_in: [BigInt!]
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  native_amount: BigInt
  native_amount_not: BigInt
  native_amount_gt: BigInt
  native_amount_lt: BigInt
  native_amount_gte: BigInt
  native_amount_lte: BigInt
  native_amount_in: [BigInt!]
  native_amount_not_in: [BigInt!]
  receiver: Bytes
  receiver_not: Bytes
  receiver_gt: Bytes
  receiver_lt: Bytes
  receiver_gte: Bytes
  receiver_lte: Bytes
  receiver_in: [Bytes!]
  receiver_not_in: [Bytes!]
  receiver_contains: Bytes
  receiver_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WithdrawalOperation_filter]
  or: [WithdrawalOperation_filter]
}

enum WithdrawalOperation_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
  nullifier
  index_ref
  energy_amount
  token_amount
  fee
  native_amount
  receiver
}

type ZkCommon {
  id: String!
  pooltx: PoolTx!
  out_commit: BigInt!
  witness: [BigInt!]!
  tree_root_after: BigInt!
  tree_proof: [BigInt!]!
}

input ZkCommon_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pooltx: String
  pooltx_not: String
  pooltx_gt: String
  pooltx_lt: String
  pooltx_gte: String
  pooltx_lte: String
  pooltx_in: [String!]
  pooltx_not_in: [String!]
  pooltx_contains: String
  pooltx_contains_nocase: String
  pooltx_not_contains: String
  pooltx_not_contains_nocase: String
  pooltx_starts_with: String
  pooltx_starts_with_nocase: String
  pooltx_not_starts_with: String
  pooltx_not_starts_with_nocase: String
  pooltx_ends_with: String
  pooltx_ends_with_nocase: String
  pooltx_not_ends_with: String
  pooltx_not_ends_with_nocase: String
  pooltx_: PoolTx_filter
  out_commit: BigInt
  out_commit_not: BigInt
  out_commit_gt: BigInt
  out_commit_lt: BigInt
  out_commit_gte: BigInt
  out_commit_lte: BigInt
  out_commit_in: [BigInt!]
  out_commit_not_in: [BigInt!]
  witness: [BigInt!]
  witness_not: [BigInt!]
  witness_contains: [BigInt!]
  witness_contains_nocase: [BigInt!]
  witness_not_contains: [BigInt!]
  witness_not_contains_nocase: [BigInt!]
  tree_root_after: BigInt
  tree_root_after_not: BigInt
  tree_root_after_gt: BigInt
  tree_root_after_lt: BigInt
  tree_root_after_gte: BigInt
  tree_root_after_lte: BigInt
  tree_root_after_in: [BigInt!]
  tree_root_after_not_in: [BigInt!]
  tree_proof: [BigInt!]
  tree_proof_not: [BigInt!]
  tree_proof_contains: [BigInt!]
  tree_proof_contains_nocase: [BigInt!]
  tree_proof_not_contains: [BigInt!]
  tree_proof_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ZkCommon_filter]
  or: [ZkCommon_filter]
}

enum ZkCommon_orderBy {
  id
  pooltx
  pooltx__id
  pooltx__index
  pooltx__tx
  pooltx__ts
  pooltx__all_messages_hash
  pooltx__type
  pooltx__message
  pooltx__gas_used
  pooltx__calldata
  out_commit
  witness
  tree_root_after
  tree_proof
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}